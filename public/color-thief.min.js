/*
 * Simplified Color Thief - extracts dominant colors from images
 */
function ColorThief() {}

ColorThief.prototype.getColor = function(sourceImage, quality) {
    var palette = this.getPalette(sourceImage, 5, quality);
    var dominantColor = palette[0];
    return dominantColor;
};

ColorThief.prototype.getPalette = function(sourceImage, colorCount, quality) {
    if (typeof colorCount === 'undefined') {
        colorCount = 10;
    }
    if (typeof quality === 'undefined' || quality < 1) {
        quality = 10;
    }

    // Create canvas
    var canvas = document.createElement('canvas');
    var context = canvas.getContext('2d');
    
    // Set canvas size
    canvas.width = sourceImage.width;
    canvas.height = sourceImage.height;
    
    // Draw image to canvas
    context.drawImage(sourceImage, 0, 0, canvas.width, canvas.height);
    
    // Get image data
    var imageData = context.getImageData(0, 0, canvas.width, canvas.height);
    var pixelArray = imageData.data;
    
    var pixelCount = canvas.width * canvas.height;
    var colorArray = [];
    
    // Sample pixels
    for (var i = 0; i < pixelCount; i += quality) {
        var offset = i * 4;
        var r = pixelArray[offset + 0];
        var g = pixelArray[offset + 1];
        var b = pixelArray[offset + 2];
        var a = pixelArray[offset + 3];
        
        // Skip transparent pixels and very light colors
        if (a >= 125 && !(r > 250 && g > 250 && b > 250)) {
            colorArray.push([r, g, b]);
        }
    }
    
    // Simple color quantization - group similar colors
    var palette = this.quantize(colorArray, colorCount);
    
    return palette;
};

ColorThief.prototype.quantize = function(colorArray, colorCount) {
    if (colorArray.length === 0) {
        return [[0, 0, 0]];
    }
    
    // Simple palette generation - find most common color ranges
    var colorMap = {};
    
    for (var i = 0; i < colorArray.length; i++) {
        var color = colorArray[i];
        // Round to nearest 32 to group similar colors
        var key = Math.floor(color[0] / 32) + ',' + 
                 Math.floor(color[1] / 32) + ',' + 
                 Math.floor(color[2] / 32);
        
        if (!colorMap[key]) {
            colorMap[key] = {
                count: 0,
                r: 0,
                g: 0,
                b: 0
            };
        }
        
        colorMap[key].count++;
        colorMap[key].r += color[0];
        colorMap[key].g += color[1];
        colorMap[key].b += color[2];
    }
    
    // Convert to array and sort by count
    var sortedColors = [];
    for (var key in colorMap) {
        var colorData = colorMap[key];
        var avgColor = [
            Math.round(colorData.r / colorData.count),
            Math.round(colorData.g / colorData.count),
            Math.round(colorData.b / colorData.count)
        ];
        sortedColors.push({
            color: avgColor,
            count: colorData.count
        });
    }
    
    // Sort by count (most common first)
    sortedColors.sort(function(a, b) {
        return b.count - a.count;
    });
    
    // Return top colors
    var palette = [];
    for (var i = 0; i < Math.min(colorCount, sortedColors.length); i++) {
        palette.push(sortedColors[i].color);
    }
    
    // Fill with default colors if needed
    while (palette.length < colorCount) {
        palette.push([Math.floor(Math.random() * 255), 
                     Math.floor(Math.random() * 255), 
                     Math.floor(Math.random() * 255)]);
    }
    
    return palette;
};

// Make it globally available
window.ColorThief = ColorThief; 